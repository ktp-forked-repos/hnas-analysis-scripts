}
corr("specdata", 150)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
length(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
x <- list(a=1:5, b=rnorm(10))
a
x
lapply(x, mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
x
x <-1:4
lapply(x,runif)
?runif
lapply(x,runif, min=0, max=10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
x <- list(a=1:5, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
sapply(x, mean)
mean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:4)
makeVector(1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
makeVector(1:4)
makeVector(c(1,2,3,4))
mvect<-makeVector(c(1,2,3,4))
mvect$get
mvect$get()
mvect$set(c(5,6,7,8))
mvect$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmean <- function(mean) {
m <<- mean
}
getmean <- function() {
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(42)
makeVector(set(42))
makeVector(42)
makeVector(x)
x <- makeVector()
x$set(42)
x
x$get()
x$getmean()
x$setmean(1024)
x$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmean <- function(mean) {
m <<- mean
}
getmean <- function() {
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
c(1:10)
class(c(1:10))
cachemean(c(1:10))
cachemean(42
)
v<-makeVector(1:10)
v$get()
v$getmean
v$getmean
cachemean(x)
cachemean(v)
cachemean(v)
cachemean(v)
cachemean(v, v$set(c{2,4,6,8,10}))
cachemean(v, v$set(c(2,4,6,8,10))
0
cachemean(v, v$set(c(2,4,6,8,10)))
cachemean(v, set)
cachemean(v)
v$setmean()
v$setmean(0)
mx<-matrix()
class(mx)
mx
mx <- matrix(c(2,4,3,1,5,7),nrow=3, ncol=4)
mx
mx <- matrix(c(2,4,3,1,5,7),nrow=3, ncol=3)
mx
solve(mx)
mx1 <- matrix(c(2,4,3,1,5,7),nrow=3, ncol=3)
View(mx)
mx1 <- matrix(c(2,4,3,1,5,7))
mx1
mx1 <- matrix(c(2,4,3,1,5,7),nrow=3, ncol=3)
mx1
solve(m1)
solve(mx1)
mx1 <- matrix(c(2,6,4,9,5,7),nrow=3, ncol=3)
solve(mx1)
mx<-rbind(c(1, -1/4), c(-1/4, 1))
solve(mx1)
det(mx1)
solve(mx1)
mx1 <- matrix(c(1,0,4,1,3,4,4,1,0),nrow=3, ncol=3)
mx1
mx1 <- matrix(c(1,1,4,0,3,1,4,4,1),nrow=3, ncol=3)
mx1 <- matrix(c(1,1,4,0,3,1,4,4,0),nrow=3, ncol=3)
mx1
det(mx1)
solve(mx1)
mx2 <- matrix(c(3,5,1,6,2,2,3,1,1),nrow=3, ncol=3)
mx2
det(mx2)
solve(mx2)
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
x<-makeCacheMatrix()
x
x$set(mx1)
x$get()
cacheSolve(mx1)
x
x$getmatrix()
cacheSolve(mx1)
x$getmatrix()
x$m
x$set(mx1)
x$get()
cacheSolve(x)
x<-makeCacheMatrix(mx1)
x$get()
cacheSolve(x)
traceback()
debug(cacheSolve(x))
debug(cacheSolve(x))
cacheSolve()
cacheSolve(x)
x
cacheSolve(mx1)
class(mx1)
class(x)
cacheSolve(x)
solve(mx1)
x$getmatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
cacheSolve(x)
x<-makeCacheMatrix(mx1)
x$setmatrix(mx1)
x$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
x<-makeCacheMatrix(mx1)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
mx1 <- matrix(c(1,1,4,0,3,1,4,4,0),nrow=3, ncol=3)
x<-makeCacheMatrix(mx1)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {
x
}
setmatrix <- function(mtrx) {
m <<- mtrx
}
getmatrix <- function() {
m
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
###########################
# Test
###########################
#
# mx1 <- matrix(c(1,1,4,0,3,1,4,4,0),nrow=3, ncol=3)
# x<-makeCacheMatrix(mx1)
# cacheSolve(x)
#
mx1 <- matrix(c(1,1,4,0,3,1,4,4,0),nrow=3, ncol=3)
x<-makeCacheMatrix(mx1)
cacheSolve(x)
x$get()
x$getmatrix()
x$m
x$getmatrix()
x$get()
cacheSolve(x)
cacheSolve(x)
mx2 <- matrix(c(1,3,5,7,9,1,2,4,1),nrow=3, ncol=3)
mx2
x2<-makeCacheMatrix()
x2
cacheSolve(x2)
solve(mx2)
cacheSolve(x2)
cacheSolve(x)
cacheSolve(x2)
x<-makeCacheMatrix()
x$get()
x2<-makeCacheMatrix(mx2)
x2$get()
cacheSolve(x2)
mx3 <- matrix(c(2,4,6,7,9,1,2,4,1),nrow=3, ncol=3)
x3<-makeCacheMatrix(mx3)
cacheSolve(x3)
mx1 <- matrix(c(2,4,3,1,5,7),nrow=3, ncol=3)
solve(mx1)
x<-makeCacheMatrix(mx1)
cacheSolve(x)
set.seed(1)
rpois(5,2)
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
rprof(NULL)
Rprof(NULL)
by.total
$by.total
$by.total
getwd()
setwd("DIResults")
dir()
?data.frame
ruscsummarymerge <-function(filelist, users, metrics){
cnames <- c("Baseline", "File Auditing", "DI File Auditing", "DI Scaning", "DI File Audit and Scan")
data <- data.frame()
olnames(data) <- cnames
}
u900 <- c("Baseline_900users.csv","FileAudit_Baseline_900users.csv","DI_FileAudit_900users.csv","DI_ScanningOnly_900.csv","DI_FileAuditScanning_900users.csv")
u900 <- c("Baseline_900users.csv","FileAudit_Baseline_900users.csv","DI_FileAudit_900users.csv","DI_ScanningOnly_900.csv","DI_FileAuditScanning_900users.csv")
ruscsummarymerge(u900, "VSPfs00.CIFS.Read.Resp.Time")
ruscsummarymerge <-function(filelist, metric){
cnames <- c("Baseline", "File Auditing", "DI File Auditing", "DI Scaning", "DI File Audit and Scan")
data <- data.frame()
colnames(data) <- cnames
}
ruscsummarymerge(u900, "VSPfs00.CIFS.Read.Resp.Time")
u900 <- c("Baseline_900users.csv","FileAudit_Baseline_900users.csv","DI_FileAudit_900users.csv","DI_ScanningOnly_900.csv","DI_FileAuditScanning_900users.csv")
data <- read.csv(u900[1],colClasses = "character")
data
data$VSPfs00.CIFS.Read.Resp.Time
paste0("Severity_Index_", i,".csv")
paste("Severity_Index_", i,".csv")
paste("Severity_Index_", 1,".csv")
paste("Severity_Index_", 1,".csv")
?paste
paste("Severity_Index_", 1,".csv", sep="")
ruscsummarymerge <-function(filelist, metric){
cnames <- c("Baseline", "File Auditing", "DI File Auditing", "DI Scaning", "DI File Audit and Scan")
merged <- data.frame()
for(j in length(metric)){
for(i in 1:length(filelist)){
data <- read.csv(filelist[i],colClasses = "character")
merged[,i] <- data[[metric[j]]]
}
#write.csv(merged, file = "Comparison_900users_summary.csv")
print(merged)
}
}
metrics <- c("VSPfs00.CIFS.Read.Resp.Time", "VSPfs00.CIFS.Write.Resp.Time")
ruscsummarymerge(u900, metrics)
